RSpec.describe Nmax do
  let(:string) { 'qwerty1234q12q90575q4892234' }

  it "has a version number" do
    expect(Nmax::VERSION).not_to be nil
  end

  describe 'should return exception raise with negative count' do
    let(:count_negative) { -2 }
    let(:call) { Nmax.call(string, count_negative) }

    it 'return exception' do
      expect { call }.to raise_exception
    end

    it 'should be class Nmax::Error' do
      expect { call }.to raise_error(Nmax::Error, /positive/)
    end
  end

  describe 'should return numbers with validate count' do
    let(:count) { 2 }
    let(:call) { Nmax.call(string, count) }
    let(:big_number) { "234d}

    it 'not should return numbers size more 1000 symbol' do
      expect(Nmax.call(big_number, 3).any? { |n| n.to_s.size > 1000 }).to be_falsey
    end

    it 'should return array' do
      expect(call).to be_is_a(Array)
    end

    it 'should return 2 nubmers' do
      expect(call.size).to eq 2
    end

    it 'return output numbers' do
      expect{ call }.to output("4892234\n90575\n").to_stdout
    end
  end
end
